<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Personal Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-23T09:19:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>erow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>erlang-rel</title>
    <link href="http://yoursite.com/2017/03/23/2017/erlang-rel/"/>
    <id>http://yoursite.com/2017/03/23/2017/erlang-rel/</id>
    <published>2017-03-23T09:42:00.000Z</published>
    <updated>2017-03-23T09:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h2><h3 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1.创建节点"></a>1.创建节点</h3><p>erlang总是以节点为单位组织的。<br>使用<code>rebar create-node nodeid=xxx</code>可以生成<code>files,reltool.config</code>。里面包含了各种节点信息。</p>
<ul>
<li><p><a href="http://erlang.org/doc/man/reltool.html" title="reltool" target="_blank" rel="external">reltool.config</a><br>下面列举几个比较常用的参数：<br>mod_cond:  </p>
<ol>
<li>all: 将会包含所有引用的模块。即在搜索路径下存在ebin的模块都会被包含。</li>
<li>ebin: 只包含本模块。</li>
<li>app: 包含本模块和相关模块。</li>
<li>derived ： 包含相关模块。</li>
</ol>
<p>lib_dir: 模块搜索目录。<br>excl_sys_filters:将包含在系统目录下匹配的文件。<br>profile: 影响<code>ncl_sys_filters, excl_sys_filters, incl_app_filters and excl_app_filters.</code>的作用</p>
<ol>
<li>development</li>
<li>embedded</li>
<li>standalone</li>
</ol>
<p>excl_lib:实验中，勿使用</p>
<ul>
<li>otp_root :不包含erlang运行环境ert  </li>
</ul>
<p>app_file: 拷贝app file的程度</p>
<ol>
<li>keep</li>
<li>strip</li>
<li>all</li>
</ol>
</li>
</ul>
<h2 id="2-升级"><a href="#2-升级" class="headerlink" title="2.升级"></a>2.升级</h2><p><a href="http://erlang.org/doc/man/appup.html" title="upgrade" target="_blank" rel="external">Application.appup</a> 文件描述了如何热升级代码<br>使用如下语法：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="symbol">Vsn</span>,</div><div class="line">  [&#123;<span class="symbol">UpFromVsn</span>, <span class="symbol">Instructions</span>&#125;, ...],</div><div class="line">  [&#123;<span class="symbol">DownToVsn</span>, <span class="symbol">Instructions</span>&#125;, ...]&#125;.</div></pre></td></tr></table></figure></p>
<p>Instructions 由以下内容构成：</p>
<pre><code>{update, Mod}
{update, Mod, supervisor}
{update, Mod, Change}
{update, Mod, DepMods}
{update, Mod, Change, DepMods}
{update, Mod, Change, PrePurge, PostPurge, DepMods}
{update, Mod, Timeout, Change, PrePurge, PostPurge, DepMods}
{update, Mod, ModType, Timeout, Change, PrePurge, PostPurge, DepMods}
  Mod = atom()
  ModType = static | dynamic
  Timeout = int()&gt;0 | default | infinity
  Change = soft | {advanced,Extra}
    Extra = term()
  PrePurge = PostPurge = soft_purge | brutal_purge
  DepMods = [Mod]
</code></pre><p>升级过程可以参见：<a href="http://erlang.org/doc/design_principles/release_handling.html" target="_blank" rel="external">Release Handling</a></p>
<ol>
<li><p>按照<a href="http://erlang.org/doc/design_principles/release_structure.html" title="创建版本" target="_blank" rel="external">Release</a>中所述的方法创建版本。</p>
</li>
<li><p>将释放转移到目标环境并安装在目标环境中。有关如何安装第一个目标系统的信息，请参阅系统原理。</p>
</li>
<li><p>对开发环境中的代码进行修改，例如错误更正。</p>
</li>
<li><p>在某些时候，需要制作新版本。相关的.app文件被更新，并写入一个新的.rel文件。</p>
</li>
<li><p>对于每个修改的应用程序，创建应用程序升级文件.appup。在此文件中，描述了如何在旧版本和新版本的应用程序之间进行升级和/或降级。</p>
</li>
<li><p>基于.appup文件，创建一个名为relup的版本升级文件。该文件描述如何在整个版本的旧版本和新版本之间升级和/或降级。</p>
</li>
<li><p>创建新的发行包并将其传输到目标系统。</p>
</li>
<li><p>使用发布处理程序解压缩新的发行包。</p>
</li>
<li><p>安装新版本，也使用发布处理程序。这是通过评估relup中的指令来完成的。可以添加，删除或重新加载模块，应用程序可以启动，停止或重新启动，等等。在某些情况下，甚至需要重启整个仿真器。</p>
</li>
</ol>
<p><a href="http://erlang.org/doc/design_principles/appup_cookbook.html" title="升级办法" target="_blank" rel="external">不同功能的模块的升级办法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发布程序&quot;&gt;&lt;a href=&quot;#发布程序&quot; class=&quot;headerlink&quot; title=&quot;发布程序&quot;&gt;&lt;/a&gt;发布程序&lt;/h2&gt;&lt;h3 id=&quot;1-创建节点&quot;&gt;&lt;a href=&quot;#1-创建节点&quot; class=&quot;headerlink&quot; title=&quot;1.创建节
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>报警处理流程</title>
    <link href="http://yoursite.com/2017/03/14/deal/"/>
    <id>http://yoursite.com/2017/03/14/deal/</id>
    <published>2017-03-14T10:40:00.000Z</published>
    <updated>2017-03-14T03:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>进入工作环境<br>代码部署在<code>check_ts</code>文件下。需使用python调用脚本。</p>
<blockquote>
<p>cd check_ts<br>python</p>
</blockquote>
</li>
<li><p>导入模块<br>此时应当在python命令行下。</p>
<pre><code>from ts import *
import datetime
time_from = to_datetime(&apos;2017-03-09 16:36&apos;)
time_to = datetime.datetime.now()
live_id = int()
move_ts(live_id, time_from, time_to)
</code></pre><p>如果出现警告，则需要确认视频情况。如果确定可以替换，则使用<code>move_ts_force(live_id, time_from, time_to)</code>强制替换</p>
</li>
<li>清除报警<br><a href="http://sz3:12345/qk_api_internal/record/check/set_normal" title="set_normal" target="_blank" rel="external">URL/qk_api_internal/record/check/set_normal</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入工作环境&lt;br&gt;代码部署在&lt;code&gt;check_ts&lt;/code&gt;文件下。需使用python调用脚本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd check_ts&lt;br&gt;python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
    
    </summary>
    
      <category term="tmp" scheme="http://yoursite.com/categories/tmp/"/>
    
    
      <category term="job" scheme="http://yoursite.com/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>golang</title>
    <link href="http://yoursite.com/2017/02/13/go/"/>
    <id>http://yoursite.com/2017/02/13/go/</id>
    <published>2017-02-13T16:14:00.000Z</published>
    <updated>2017-03-14T03:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="emacs-开发环境"><a href="#emacs-开发环境" class="headerlink" title="emacs 开发环境"></a>emacs 开发环境</h2><p>spacemacs已经集成了不少功能，但是缺少代码提示。因此还需要<a href="https://github.com/nsf/gocode" target="_blank" rel="external">gocode</a>来辅助。</p>
<ol>
<li><p>安装所需的命令</p>
<blockquote>
<p>go get -u -v github.com/nsf/gocode<br>go get -u -v github.com/rogpeppe/godef<br>go get -u -v golang.org/x/tools/cmd/guru<br>go get -u -v golang.org/x/tools/cmd/gorename<br>go get -u -v golang.org/x/tools/cmd/goimports</p>
</blockquote>
</li>
<li><p>将gocode中的<code>go-autocomplete.el</code>拷贝至<code>elpa/go-mode</code>下<br>向space macs手动添加包：<code>dotspacemacs-additional-packages &#39;(go-autocomplete)</code><br>在<code>dotspacemace/user-config</code>中添加以下内容</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name">require</span> 'go-autocomplete)</div><div class="line">(<span class="name">require</span> 'auto-complete-config)</div><div class="line">(<span class="name">ac-config-default</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>#GO<br><a href="http://docs.studygolang.com/pkg/" target="_blank" rel="external">package 手册</a> 、<a href="https://github.com/gopl-zh/gopl-zh.github.com" target="_blank" rel="external">go语言圣经</a></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol>
<li><p>声明 ：<code>var|const|type|func name (类型) (值)</code></p>
<p><code>var</code> 显式声明一个变元。<code>var name Type</code><br><code>:=</code> 语法可以隐式地声明一个变元。<code>name := f() | a</code><br>隐式声明的变元的作用域是可以被覆盖的，但显式的不能。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> int <span class="comment">//1.会导致3出错</span></div><div class="line"><span class="selector-tag">a</span> := <span class="number">1</span>    <span class="comment">//2.不会导致3处出错</span></div><div class="line">&#123;</div><div class="line"><span class="selector-tag">a</span>:= <span class="number">2</span>     <span class="comment">//3.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>const a=2</code>, <code>const a float64=2</code></p>
<p><code>type name define</code>，<code>define= Type | struct{..}|interface{}</code></p>
<p><code>func (name Type)* name (arg...) {...}</code></p>
<p>打*号的部分是 接收器(receiver)，用于扩展指定<code>Type</code>（必须是自定义类型）。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">type Point struct&#123; X, Y float64 &#125;</div><div class="line"><span class="comment">// traditional function</span></div><div class="line">func (<span class="selector-tag">p</span> Point) Distance(<span class="selector-tag">q</span> Point) float64 &#123;</div><div class="line">    return math.Hypot(<span class="selector-tag">q</span><span class="selector-class">.X-p</span><span class="selector-class">.X</span>, <span class="selector-tag">q</span><span class="selector-class">.Y-p</span><span class="selector-class">.Y</span>)</div><div class="line">&#125;</div><div class="line">type Float64 float64 <span class="comment">//</span></div><div class="line">func (<span class="selector-tag">p</span> Float64) Distance(<span class="selector-tag">q</span> Float64) float64 &#123;</div><div class="line">	return math.Abs(float64(<span class="selector-tag">p</span> - q))</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">var</span> x, y Float64 = <span class="number">1.0</span>, <span class="number">2</span></div><div class="line">x.Distance(y)</div></pre></td></tr></table></figure>
<p>匿名函数：<code>func(r rune) rune { return r + 1 }</code><br>便捷操作</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"C"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"math"</span></div><div class="line">)</div><div class="line"><span class="keyword">const</span> | <span class="keyword">var</span> (</div><div class="line">    AbsoluteZeroC Celsius = <span class="number">-273.15</span> <span class="comment">// 绝对零度</span></div><div class="line">    FreezingC     Celsius = <span class="number">0</span>       <span class="comment">// 结冰点温度</span></div><div class="line">    BoilingC      Celsius = <span class="number">100</span>     <span class="comment">// 沸水温度</span></div><div class="line">)</div><div class="line"><span class="keyword">var</span> a,b,c <span class="built_in">Type</span></div></pre></td></tr></table></figure>
</li>
<li><p>控制结构</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> a, b := <span class="number">21</span>, <span class="number">3</span>; a &gt; b &#123;</div><div class="line">  fmt.Println("a&gt;b ? true")</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>, <span class="built_in">j</span> := <span class="number">1</span>, <span class="number">10</span>; <span class="built_in">i</span> &lt; <span class="built_in">j</span>; <span class="built_in">i</span>,<span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>+<span class="number">1</span> &#123;  //死循环</div><div class="line">  fmt.Println(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> ch &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">'0'</span>:</div><div class="line">    <span class="keyword">fallthrough</span>   <span class="comment">//必须是最后一个语句</span></div><div class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">    cl = <span class="string">"Int"</span></div><div class="line"><span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line"><span class="keyword">case</span> <span class="string">'a'</span>:</div><div class="line">    <span class="keyword">fallthrough</span></div><div class="line">    cl = <span class="string">"ABC"</span>    <span class="comment">//error</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    cl = <span class="string">"Other Char"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类型转换</p>
<p>语法： &lt;目标类型&gt; ( &lt;表达式&gt; )<br>   &lt;目标类型的值&gt;，&lt;布尔参数&gt; := &lt;表达式&gt;.( 目标类型 ) // 安全类型断言<br>　　&lt;目标类型的值&gt; := &lt;表达式&gt;.( 目标类型 )　　//非安全类型断言</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var3 := int64(var1)</div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">i</span> interface&#123;&#125; = <span class="string">"TT"</span></div><div class="line">j, <span class="selector-tag">b</span> := <span class="selector-tag">i</span>.(int)</div><div class="line"><span class="keyword">if</span> <span class="selector-tag">b</span> &#123;</div><div class="line">    fmt.Printf(<span class="string">"%T-&gt;%d\n"</span>, j, j)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"类型不匹配"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ol>
<li><p>数组</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">q := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">q := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//等价</span></div><div class="line">fmt.Printf(<span class="string">"%T\n"</span>, q) <span class="comment">// "[3]int"</span></div><div class="line"></div><div class="line">r := [...]<span class="keyword">int</span>&#123;<span class="number">99</span>: <span class="number">-1</span>&#125;<span class="comment">// &#123;下表：值&#125;，填充默认值</span></div></pre></td></tr></table></figure>
</li>
<li><p>Slice<br>Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作<code>[]T</code>，其中T代表slice中元素的类型；数组和slice之间有着紧密的联系。一个slice是一个轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且slice的底层确实引用一个数组对象。一个slice由三个部分构成：指针、长度和容量。<br><code>array[i:j]</code>来创建一个Slice，0 ≤ i≤ j≤ cap(s)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">array</span> := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</div><div class="line">front := <span class="built_in">array</span>[<span class="number">0</span>:<span class="number">5</span>]</div><div class="line">mid := <span class="built_in">array</span>[<span class="number">3</span>:<span class="number">8</span>]</div><div class="line">tail := <span class="built_in">array</span>[<span class="number">4</span>:<span class="number">9</span>]</div><div class="line">front[<span class="number">4</span>] = <span class="number">555</span> <span class="comment">//3个数都被修改</span></div><div class="line"><span class="built_in">array</span>[<span class="number">5</span>] = <span class="number">605</span> <span class="comment">//会导致 mid,tail 修改</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">array := [...]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</div><div class="line">front := array[0:5]</div><div class="line">mid := array[3:8]</div><div class="line">tail := array[4:9]</div><div class="line">nf := append(tail, 66) //1.</div><div class="line">nf := append(mid, 66) //2.</div><div class="line">nf[0] = 5555</div><div class="line">fmt.Println(front, mid, tail, nf)</div><div class="line">//1. [1<span class="number"> 2 </span>3<span class="number"> 4 </span>601] [4<span class="number"> 601 </span>6<span class="number"> 7 </span>8] [601<span class="number"> 6 </span>7<span class="number"> 8 </span>9] [5555<span class="number"> 6 </span>7<span class="number"> 8 </span>9 66]</div><div class="line">//2. [1<span class="number"> 2 </span>3<span class="number"> 5555 </span>5] [5555<span class="number"> 5 </span>6<span class="number"> 7 </span>8] [5<span class="number"> 6 </span>7<span class="number"> 8 </span>66] [5555<span class="number"> 5 </span>6<span class="number"> 7 </span>8 66]</div></pre></td></tr></table></figure></p>
<p>当原数组够用时，append会直接使用原来的空间。不够时另开一片。<br><code>[]T</code>是切片类型 <code>[n]T</code>是数组类型</p>
<ol>
<li><p>Map</p>
<p>我们也可以用map字面值的语法创建map，同时还可以指定一些最初的key/value：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">// mapping from strings to ints</span></div><div class="line">ages := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</div><div class="line">    <span class="string">"alice"</span>:   <span class="number">31</span>,</div><div class="line">    <span class="string">"charlie"</span>: <span class="number">34</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结构体  </p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="type">Employee</span> struct &#123;</div><div class="line">    <span class="type">ID</span>        int</div><div class="line">    <span class="type">Name</span>      string</div><div class="line">    <span class="type">Address</span>   string</div><div class="line">    <span class="type">DoB</span>       time.<span class="type">Time</span></div><div class="line">    <span class="type">Position</span>  string</div><div class="line">    <span class="type">Salary</span>    int</div><div class="line">    <span class="type">ManagerID</span> int</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">var</span> dilbert <span class="type">Employee</span></div></pre></td></tr></table></figure>
</li>
<li><p>接口<br>一类有相同方法的对象。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="title">package</span> io</div><div class="line"><span class="keyword">type</span> <span class="type">Reader</span> interface &#123;</div><div class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> <span class="type">Closer</span> interface &#123;</div><div class="line">    <span class="type">Close</span>() error</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> <span class="type">ReadWriter</span> interface &#123;</div><div class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</div><div class="line">    <span class="type">Writer</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">var</span> w io.<span class="type">Writer</span></div><div class="line"><span class="title">w</span> = os.<span class="type">Stdout</span> //使用接口</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><pre><code>关键字：
        break      default       func     interface   select
        case       defer         go       map         struct
        chan       else          goto     package     switch
        const      fallthrough   if       range       type
        continue   for           import   return      var

内建常量: true false iota nil

内建类型: int int8 int16 int32 int64
          uint uint8 uint16 uint32 uint64 uintptr
          float32 float64 complex128 complex64
          bool byte rune string error

内建函数: make len cap new append copy close delete
          complex real imag
          panic recover
</code></pre><ol>
<li>defer ：延迟执行<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">defer</span> <span class="built_in">println</span>(<span class="string">"p1"</span>) <span class="comment">//后被打印</span></div><div class="line"><span class="keyword">defer</span> <span class="built_in">println</span>(<span class="string">"p2"</span>) <span class="comment">//先被打印</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>假设defer处声明了一个变量，那么在析构的时候执行内容。</p>
<ol>
<li><p>range ：配合for使用</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for <span class="built_in">index</span>, <span class="keyword">value</span> := <span class="built_in">range</span> mySlice &#123;</div><div class="line">    <span class="keyword">fmt</span>.Println(<span class="string">"index: "</span> + <span class="built_in">index</span>)</div><div class="line">    <span class="keyword">fmt</span>.Println(<span class="string">"value: "</span> + <span class="keyword">value</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>for index,char := range string {}</li>
<li>for index,value := range array {}</li>
<li>for index,value := range slice {}</li>
<li>for key,value := range map {}</li>
<li>for value := range chan T</li>
</ul>
</li>
</ol>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>不同于面向对象的语言先定义一个对象具有哪些抽象行为再实现的思路。<br>GO是先实现一个对象，再检查这个对象是否符合接口规范。</p>
<ol>
<li><p>方法</p>
<p>扩展某一个类型</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">type Point struct&#123; X, Y float64 &#125;</div><div class="line"></div><div class="line"><span class="comment">// traditional function</span></div><div class="line">func Distance(<span class="selector-tag">p</span>, <span class="selector-tag">q</span> Point) float64 &#123;</div><div class="line">    return math.Hypot(<span class="selector-tag">q</span><span class="selector-class">.X-p</span><span class="selector-class">.X</span>, <span class="selector-tag">q</span><span class="selector-class">.Y-p</span><span class="selector-class">.Y</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// same thing, but as a method of the Point type</span></div><div class="line">func (<span class="selector-tag">p</span> Point) Distance(<span class="selector-tag">q</span> Point) float64 &#123;</div><div class="line">    return math.Hypot(<span class="selector-tag">q</span><span class="selector-class">.X-p</span><span class="selector-class">.X</span>, <span class="selector-tag">q</span><span class="selector-class">.Y-p</span><span class="selector-class">.Y</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接口</p>
<p>一类有相同方法的对象。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">package</span> io</div><div class="line"><span class="keyword">type</span> <span class="type">Reader</span> interface &#123;</div><div class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> <span class="type">Closer</span> interface &#123;</div><div class="line">    <span class="type">Close</span>() error</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> <span class="type">ReadWriter</span> interface &#123;</div><div class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</div><div class="line">    <span class="type">Writer</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><ol>
<li><p>goroutine<br>使用go关键字</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">f</span><span class="params">()</span></span>    <span class="comment">// call f(); wait for it to return</span></div><div class="line">go f() <span class="comment">// create a new goroutine that calls f(); don't wait</span></div></pre></td></tr></table></figure>
</li>
<li><p>channel  </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></div><div class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)    <span class="comment">// unbuffered channel</span></div><div class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>) <span class="comment">// unbuffered channel</span></div><div class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">// buffered channel with capacity 3</span></div><div class="line"></div><div class="line">ch &lt;- <span class="number">2</span> <span class="comment">//send</span></div><div class="line">a := ch <span class="comment">//receive</span></div></pre></td></tr></table></figure>
<p><code>chan&lt;- int</code>表示一个只发送int的channel，只能发送不能接收。<br><code>&lt;-chan int</code>表示一个只接收int的channel，只能接收不能发送。<br>一个基于无缓存Channels的发送操作将导致发送者goroutine阻塞，直到另一个goroutine在相同的Channels上执行接收操作，当发送的值通过Channels成功传输之后，两个goroutine可以继续执行后面的语句。<br><code>x, ok := &lt;-naturals</code> 这种形式可以判断，管道naturals 是否有效。<br>更简洁的形式是<code>for x:= range naturals</code></p>
</li>
<li><p>select  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">select &#123;</div><div class="line"><span class="keyword">case</span> &lt;-<span class="string">ch1:</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">case</span> <span class="string">x :</span>= &lt;-<span class="string">ch2:</span></div><div class="line">    <span class="comment">// ...use x...</span></div><div class="line"><span class="keyword">case</span> ch3 &lt;- <span class="string">y:</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">10</span> * time.Second):</div><div class="line">    <span class="comment">//超时机制，不能与default一起</span></div><div class="line"><span class="string">default:</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="调用C库"><a href="#调用C库" class="headerlink" title="调用C库"></a>调用C库</h2><p><a href="https://golang.org/cmd/cgo/" target="_blank" rel="external">cgo</a><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"><span class="comment">#cgo CFLAGS: -I/usr/include</span></div><div class="line"><span class="comment">#cgo LDFLAGS: -L/usr/lib -lbz2</span></div><div class="line"><span class="comment">#include &lt;bzlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line">bz_stream* bz2alloc() &#123; <span class="keyword">return</span> calloc(<span class="number">1</span>, sizeof(bz_stream)); &#125;</div><div class="line"><span class="built_in">int</span> bz2compress(bz_stream *s, <span class="built_in">int</span> action,</div><div class="line">                <span class="built_in">char</span> *<span class="keyword">in</span>, unsigned *inlen, <span class="built_in">char</span> *<span class="keyword">out</span>, unsigned *outlen);</div><div class="line"><span class="built_in">void</span> bz2free(bz_stream* s) &#123; free(s); &#125;</div><div class="line">*/</div><div class="line"><span class="keyword">import</span> <span class="string">"C"</span></div></pre></td></tr></table></figure></p>
<p>可以添加一下编译选项：</p>
<blockquote>
<p>CFLAGS, CPPFLAGS, CXXFLAGS, FFLAGS , LDFLAGS </p>
</blockquote>
<p>c代码必须加以注释且后面紧跟<code>import &quot;C&quot;</code></p>
<p>在Go中使用C的类型</p>
<pre><code>C.char, C.schar (signed char), C.uchar (unsigned char), C.short, C.ushort (unsigned short),C.int, C.uint (unsigned int), C.long, C.ulong (unsigned long), C.longlong (long long),C.ulonglong (unsigned long long), C.float, C.double, C.complexfloat (complex float),  C.complexdouble (complex double)
</code></pre><p>如果是 struct, union, or enum 类型的，会添加前缀 struct<em>, union</em>, or enum_。<code>struct。a{...};</code>在go中变为<code>C.struct_a</code>。<br><code>C.sizeof_T</code> 表示C中某种类型的长度</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="comment">// typedef int (*intFunc) ();</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// int</span></div><div class="line"><span class="comment">// bridge_int_func(intFunc f)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">//		return f();</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// int fortytwo()</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">//	    return 42;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="keyword">import</span> <span class="string">"C"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	f := C.intFunc(C.fortytwo)</div><div class="line">	fmt.Println(<span class="keyword">int</span>(C.bridge_int_func(f)))</div><div class="line">	// Output: 42</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不支持可变参数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;emacs-开发环境&quot;&gt;&lt;a href=&quot;#emacs-开发环境&quot; class=&quot;headerlink&quot; title=&quot;emacs 开发环境&quot;&gt;&lt;/a&gt;emacs 开发环境&lt;/h2&gt;&lt;p&gt;spacemacs已经集成了不少功能，但是缺少代码提示。因此还需要&lt;a hr
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://yoursite.com/2017/02/13/hello/"/>
    <id>http://yoursite.com/2017/02/13/hello/</id>
    <published>2017-02-13T06:14:00.000Z</published>
    <updated>2017-03-14T03:07:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>it’s my first hello <a href="http://asdf" target="_blank" rel="external">package 手册</a><br>xaa<br>x<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">asdfasd</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;it’s my first hello &lt;a href=&quot;http://asdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package 手册&lt;/a&gt;&lt;br&gt;xaa&lt;br&gt;x&lt;br&gt;&lt;figure class=&quot;highlight ebnf
    
    </summary>
    
      <category term="a" scheme="http://yoursite.com/categories/a/"/>
    
    
      <category term="asdf" scheme="http://yoursite.com/tags/asdf/"/>
    
  </entry>
  
</feed>
